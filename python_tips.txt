Типы данных Python

=== Числа (функции работы с числами) ===

round() - округлить число до нужного кличества знаков:
    
	In [9]: round(10/3.0, 2)
	Out[9]: 3.33

int() - выполнить конвертацию в тип int (во втором аргументе можно указывать систему счисления):
    
	In [20]: int(11, 2)
	Out[20]: 3
    
	In [26]: int('ff', 16)
	Out[26]: 255

bin() - получить двоичное представление числа (результат - строка):
    
	In [23]: bin(8)
	Out[23]: '0b1000'

	In [24]: bin(255)
	Out[24]: '0b11111111'


hex() - получить шестнадцатеричное значение:
    
	In [25]: hex(10)
	Out[25]: '0xa'

Для более сложных математических функций в Python есть модуль math:

    In [30]: math.sqrt()
    In [31]: math.factorial()
    In [32]: math.pi

========================================



=== Строки =============================

Строка - последовательность символов, заключенная в кавычки, неизменяемый упорядоченный тип данных

Суммирование строк:
    
	In [14]: intf = 'interface'
	In [15]: tun = 'Tunnel0'
	
	In [16]: intf + tun
	Out[16]: 'interfaceTunnel0'
	
	In [17]: intf + ' ' + tun
	Out[17]: 'interface Tunnel0'
    
Умножение строки на число:
    
	intf * 5
	Out[18]: 'interfaceinterfaceinterfaceinterfaceinterface'
	
	In [19]: '#' * 40
	Out[19]: '########################################'

    
Срез строк (по второе число диапазона не включая его, если не указывается второе число, то срез будет до конца строки):
    
	In [20]: string1 = 'interface FastEthernet1/0'
	
	In [24]: string1[0:9]
	Out[24]: 'interface'
    
	In [26]: string1[10:]
	Out[26]: 'FastEthernet1/0'

Срезать три последних символа строки:
    
	In [27]: string1[-3:]
	Out[27]: '1/0'
    
В срезе можно указывать шаг. Так можно получить нечетные числа:
    
	In [28]: a = '0123456789'
	
	In [29]: a[1::2]
	Out[29]: '13579'
    
Четные числа:
    
	In [31]: a[::2]
	Out[31]: '02468'

Получить строку в обратном порядке:
    
	In [28]: a = '0123456789'
	
	In [29]: a[::]
	Out[29]: '0123456789'
	
	In [30]: a[::-1]
	Out[30]: '9876543210'
    
len() - получить количество символов в строке (функция)

upper(), lower(), swapcase(), capitalize() - методы преобразования регистра

сount() - метод подсчета того, сколько раз символ или подстрока присутствует в строке:
    
	In [33]: string1 = 'Hello, hello, hello, hello'
	
	In [34]: string1.count('hello')
	Out[34]: 3
	
	In [35]: string1.count('ello')
	Out[35]: 4
	
	In [36]: string1.count('l')
	Out[36]: 8

find() - метод определения позиции символа/подстроки в строке (первого совпадения). Если совпадение не найдено, метод find возвращает -1:
    
	In [37]: string1 = 'interface FastEthernet0/1'
	
	In [38]: string1.find('Fast')
	Out[38]: 10
	
	In [39]: string1[string1.find('Fast')::]
	Out[39]: 'FastEthernet0/1'
	
	Если совпадение не найдено, метод find возвращает -1.

startswith(), endswith() - методы проверки на то, начинается или заканчивается ли строка на определенные символы:
    
	In [40]: string1 = 'FastEthernet0/1'
	
	In [41]: string1.startswith('Fast')
	Out[41]: True
	
	In [44]: string1.endswith('0/2')
	Out[44]: False

    Методам startswith() и endswith() можно передавать несколько значений (обязательно как кортеж):
    
	In [1]: "test".startswith(("r", "t"))
	Out[1]: True
    
	In [4]: "rtest".endswith(("r", "a"))
	Out[4]: False
    
replace() - метод замены подстроки в строке на подстроку, указанную во втором аргументе:
    
	In [45]: string1 = 'FastEthernet0/1'
	
	In [46]: string1.replace('Fast', 'Gigabit')
	Out[46]: 'GigabitEthernet0/1'
    
strip() - метод, убирающий символы, переданные в аргументе, В НАЧАЛЕ и В КОНЦЕ строки, по умолчанию убирает пробельные символы (\t\n\r\f\v):
    
	In [51]: ad_metric = '[110/1045]'
	In [52]: ad_metric.strip('[]')
	Out[52]: '110/1045'
 
    По умолчанию убирает спецсимволы и в начале, и в конце строки. Если необходимо убрать символы только слева или только справа, можно использовать, соответственно, методы lstrip() и rstrip()

split() - разбивает строку на части, используя как разделитель переданный символ (по умолчанию разбивает по пробельным символам - пробелы, табы, перевод строки, пробельные символы также удаляются в начале и в конце строки):
    
	In [53]: string1 = 'switchport trunk allowed vlan 10,20,30,100-200'
	
	In [54]: commands = string1.split()
	
	In [55]: print(commands)
	['switchport', 'trunk', 'allowed', 'vlan', '10,20,30,100-200']
    
	In [10]: ip = "192.168.100.1"
	
	In [11]: ip.split(".")
	Out[11]: ['192', '168', '100', '1']

    split() - разбивает строку не по одному пробельному символу, а по любому количеству
    split(' ') - разбивает строку по каждому пробелу в отдельности

=========================================================



=== Форматирование строк методом format() ===============

format() - метод форматирования строк, в качестве аргумента подставляется значение в строку на место символа '{}':

	In [1]: "interface FastEthernet0/{}".format('1')
	Out[1]: 'interface FastEthernet0/1'
    
Вывести данные столбцами одинаковой ширины по 15 символов с выравниванием по правой стороне:

    In [4]: print("{:>15} {:>15} {:>15}".format(a, b, c))

Указать, сколько цифр после запятой выводить

	In [9]: print("{:.3f}".format(10.0/3))
	Out[9]: 3.333

Конвертировать числа в двоичный формат:

	In [11]: '{:b} {:b} {:b} {:b}'.format(192, 100, 1, 1)
	Out[11]: '11000000 1100100 1 1'
    
Дополнить числа нулями, вместо пробелов с шириной столбца 8 символов:

	In [13]: '{:08b} {:08b} {:08b} {:08b}'.format(192, 100, 1, 1)
	Out[13]: '11000000 01100100 00000001 00000001'

В фигурных скобках можно указывать имена. Это позволяет передавать аргументы в любом порядке, а также делает шаблон более понятным:

	In [15]: '{ip}/{mask}'.format(mask=24, ip='10.1.1.1')
	Out[15]: '10.1.1.1/24'

Указание номера аргумента:

	In [16]: '{1}/{0}'.format(24, '10.1.1.1')
	Out[16]: '10.1.1.1/24'

=========================================================



=== Форматрование строк с помощью f-строк ==============

F-строки — это литерал строки с буквой f перед ним. Внутри f-строки в паре фигурных скобок указываются имена переменных, которые надо подставить:

	In [1]: ip = '10.1.1.1'
	
	In [2]: mask = 24
	
	In [3]: f"IP: {ip}, mask: {mask}"
	Out[3]: 'IP: 10.1.1.1, mask: 24'
    
f-строки — это выражение, которое выполняется, а не просто строка, таким образом нельзя сначала написать шаблон, а затем определить переменные, которые используются в шаблоне

Кроме подстановки значений переменных, в фигурных скобках можно писать выражения:

	In [5]: first_name = 'William'
	
	In [6]: second_name = 'Shakespeare'
	
	In [7]: f"{first_name.upper()} {second_name.upper()}"
	Out[7]: 'WILLIAM SHAKESPEARE'

После двоеточия в f-строках можно указывать те же значения, что и при использовании format:

	In [9]: oct1, oct2, oct3, oct4 = [10, 1, 1, 1]
    
	In [10]: print(f'''
		...: IP address:
		...: {oct1:<8} {oct2:<8} {oct3:<8} {oct4:<8}
		...: {oct1:08b} {oct2:08b} {oct3:08b} {oct4:08b}''')

	IP address:
	10 1 1 1
	00001010 00000001 00000001 00000001

=========================================================



=== Список (List) =======================================

Список - это последовательность элементов, разделенных между собой запятой и заключенных в квадратные скобки, изменяемый упорядоченный тип данных

	In [1]: list1 = [10,20,30,77]
	In [2]: list2 = ['one', 'dog', 'seven']
	In [3]: list3 = [1, 20, 4.0, 'word']
    
Создание списков:

	In [1]: vlans = [10, 20, 30, 50]
    
	Создание списка с помощью функции list():
	
	In [2]: list1 = list('router')
	In [3]: print(list1)
	['r', 'o', 'u', 't', 'e', 'r']

Так как список - это упорядоченный тип данных, то, как и в строках, в списках можно обращаться к элементу по номеру, делать срезы:

	In [4]: list3 = [1, 20, 4.0, 'word']
	
	In [5]: list3[1]
	Out[5]: 20
	
	In [6]: list3[1::]
	Out[6]: [20, 4.0, 'word']
	
	In [8]: list3[::-1]
	Out[8]: ['word', 4.0, 20, 1]

reverse() - метод переворачивания списка:

	In [10]: vlans = ['10', '15', '20', '30', '100-200']
	In [11]: vlans.reverse()
	In [12]: vlans
	Out[12]: ['100-200', '30', '20', '15', '10']
    
Изменить элемент списка:

	In [13]: list3
	Out[13]: [1, 20, 4.0, 'word']
	
	In [14]: list3[0] = 'test'
	
	In [15]: list3
	Out[15]: ['test', 20, 4.0, 'word']

Можно создавать и список списков и обращаться к элементам во вложенных списках:

	In [16]: interfaces = [['FastEthernet0/0', '15.0.15.1', 'YES', 'manual', 'up', 'up'],
		....: ['FastEthernet0/1', '10.0.1.1', 'YES', 'manual', 'up', 'up'],
		....: ['FastEthernet0/2', '10.0.2.1', 'YES', 'manual', 'up', 'down']]
	
	In [17]: interfaces[0][0]
	Out[17]: 'FastEthernet0/0'
	
	In [18]: interfaces[2][0]
	Out[18]: 'FastEthernet0/2'
	
	In [19]: interfaces[2][1]
	Out[19]: '10.0.2.1'

len() - функция, возвращает количество элементов списка

	In [1]: items = [1, 2, 3]
	
	In [2]: len(items)
	Out[2]: 3

sorted() - сортирует элементы списка по возрастанию и возвращает новый список:

	In [1]: names = ['John', 'Michael', 'Antony']
	
	In [2]: sorted(names)
	Out[2]: ['Antony', 'John', 'Michael']

join() - метод, собирающий список в одну СТРОКУ с разделителем, который указан перед join:

	In [16]: vlans = ['10', '20', '30']
	
	In [17]: ','.join(vlans)
	Out[17]: '10,20,30'

append() - метод, добавляющий в конец списка указанный элемент, ничего не возвращает:

	In [18]: vlans = ['10', '20', '30', '100-200']
	
	In [19]: vlans.append('300')
	
	In [20]: vlans
	Out[20]: ['10', '20', '30', '100-200', '300']
    
extend() - метод для объединения списков, изменяет список, к которому применен:

	In [21]: vlans = ['10', '20', '30', '100-200']
	
	In [22]: vlans2 = ['300', '400', '500']
	
	In [23]: vlans.extend(vlans2)
	
	In [24]: vlans
	Out[24]: ['10', '20', '30', '100-200', '300', '400', '500']
    
Суммирование списков:

	In [27]: vlans = ['10', '20', '30', '100-200']
	
	In [28]: vlans2 = ['300', '400', '500']
	
	In [29]: vlans + vlans2
	Out[29]: ['10', '20', '30', '100-200', '300', '400', '500']
    
	Суммирование через переменную result:
	
	In [30]: result = vlans + vlans2
	
	In [31]: result
	Out[31]: ['10', '20', '30', '100-200', '300', '400', '500']

pop() - метод, удаляющий элемент, соответствующий указанному НОМЕРУ в списке, возвращает этот элемент (без указания номера удаляется ПОСЛЕДНИЙ элемент списка):

	In [28]: vlans = ['10', '20', '30', '100-200']
	
	In [29]: vlans.pop(-1)
	Out[29]: '100-200'
	
	In [30]: vlans
	Out[30]: ['10', '20', '30']
	
	Без указания номера удаляется ПОСЛЕДНИЙ элемент списка!
    
remove() - метод, удаляющий указанный элемент, НЕ ВОЗВРАЩАЕТ удаленный элемент:

    In [31]: vlans = ['10', '20', '30', '100-200']
    In [32]: vlans.remove('20')
    In [33]: vlans
    Out[33]: ['10', '30', '100-200']
    
index() - метод для определения под каким номером в списке находится указанный элемент:

    In [35]: vlans = ['10', '20', '30', '100-200']
    
	In [36]: vlans.index('30')
    Out[36]: 2
    
insert() - метод, позволяющий вставить элемент на определенное место в списке:

    In [37]: vlans = ['10', '20', '30', '100-200']
    
	In [38]: vlans.insert(1, '15')
    
	In [39]: vlans
    Out[39]: ['10', '15', '20', '30', '100-200']
    
sort() - сортирует список на месте:

    In [40]: vlans = [1, 50, 10, 15]
    
	In [41]: vlans.sort()
    
	In [42]: vlans
    Out[42]: [1, 10, 15, 50]	

=========================================================



=== Словарь (Dictionary) ================================



=========================================================
