Типы данных Python

=== Числа (функции работы с числами) ===

round() - округлить число до нужного кличества знаков:
    
    round(10/3.0, 2)
    3.33

int() - выполнить конвертацию в тип int (во втором аргументе можно указывать систему счисления):
    
    int(11, 2)
    3
    
    int('ff', 16)
    255

bin() - получить двоичное представление числа (результат - строка):
    
    bin(8)
    '0b1000'
    
    bin(int('ff', 16))
    '0b11111111'


hex() - получить шестнадцатеричное значение:
    
    hex(10)
    '0xa'

Для более сложных математических функций в Python есть модуль math:

    math.sqrt()
    math.factorial()
    math.pi

========================================



=== Строки =============================

Строка - последовательность символов, заключенная в кавычки, неизменяемый упорядоченный тип данных

Суммирование строк:
    
    intf = 'interface'
    tun = 'Tunnel0'
    intf + tun
    'interfaceTunnel0'
    
Умножение строки на число:
    
    intf * 5
    'interfaceinterfaceinterfaceinterfaceinterface'
    
Срез строк (по второе число не включая его, если не указывается второе число, то срез будет до конца строки):
    
    string1 = 'interface FastEthernet1/0'
    string1[0:9]
    'interface'
    
    string1[10:]
    'FastEthernet1/0'

Срезать три последних символа строки:
    
    string1[-3:]
    '1/0'
    
В срезе можно указывать шаг. Так можно получить нечетные числа:
    
    a = '0123456789'
    a[1::2]
    '13579'
    
Четные числа:
    
    a[::2]
    '02468'

Получить строку в обратном порядке:
    
    a = '0123456789'
    a[::-1]
    '9876543210'
    
len() - получить количество символов в строке (функция)

upper(), lower(), swapcase(), capitalize() - методы преобразования регистра

сount() - метод подсчета того, сколько раз символ или подстрока присутствует в строке:
    
    string1 = 'Hello, hello, hello, hello'
    string1.count('hello')
    3
    
find() - метод определения позиции символа/подстроки в строке (первого совпадения). Если совпадение не найдено, метод find возвращает -1:
    
    string1 = 'interface FastEthernet0/1'
    string1.find('Fast')
    10
    
    string1[string1.find('Fast')::]
    'FastEthernet0/1'

startswith(), endswith() - методы проверки на то, начинается или заканчивается ли строка на определенные символы:
    
    string1 = 'FastEthernet0/1'
    string1.startswith('Fast')
    True
    
    string1.endswith('0/2')
    False

    Методам startswith() и endswith() можно передавать несколько значений (обязательно как кортеж):
    
    "test".startswith(("r", "t"))
    True
    
    "rtest".endswith(("r", "a"))
    False
    
replace() - метод замены подстроки на подстроку в строке:
    
    string1 = 'FastEthernet0/1'
    string1.replace('Fast', 'Gigabit')
    'GigabitEthernet0/1'
    
strip() - метод, убирающий символы в начале и конце строки, по умолчанию убирает пробельные символы (\t\n\r\f\v). Убирает символы, переданные в аргументе:
    
    ad_metric = '[110/1045]'
    ad_metric.strip('[]')
    '110/1045'

    По умолчанию убирает спецсимволы и в начале, и в конце строки. Если необходимо убрать символы только слева или только справа, можно использовать, соответственно, методы lstrip() и rstrip()

split() - разбивает строку на части, используя как разделитель переданный символ (по умолчанию разбивает по пробельным символам - пробелы, табы, перевод строки, пробельные символы также удаляются в начале и в конце строки):
    
    string1 = 'switchport trunk allowed vlan 10,20,30,100-200'
    commands = string1.split()
    print(commands)
    ['switchport', 'trunk', 'allowed', 'vlan', '10,20,30,100-200
    
    ip = "192.168.100.1"
    ip.split(".")
    ['192', '168', '100', '1']

    split() - разбивает строку не по одному пробельному символу, а по любому количеству
    split(' ') - разбивает строку по каждому пробелу в отдельности
    


========================================



=== Форматирование строк методом format() ===============

format() - метод форматирования строк, в качестве аргумента подставляется значение в строку на место символа '{}':

    "interface FastEthernet0/{}".format('1')
    'interface FastEthernet0/1'
    
Вывести данные столбцами одинаковой ширины по 15 символов с выравниванием по правой стороне:

    print("{:>15} {:>15} {:>15}".format(a, b, c))

Указать, сколько цифр после запятой выводить

    print("{:.3f}".format(10.0/3))
    3.333

Конвертировать числа в двоичный формат:

    '{:b} {:b} {:b} {:b}'.format(192, 100, 1, 1)
    '11000000 1100100 1 1'
    
Дополнить числа нулями, вместо пробелов с шириной столбца 8 символов:

    '{:08b} {:08b} {:08b} {:08b}'.format(192, 100, 1, 1)
    '11000000 01100100 00000001 00000001'

В фигурных скобках можно указывать имена. Это позволяет передавать аргументы в любом порядке, а также делает шаблон более понятным:

    '{ip}/{mask}'.format(mask=24, ip='10.1.1.1')
    '10.1.1.1/24'

Указание номера аргумента:

    '{1}/{0}'.format(24, '10.1.1.1')
    '10.1.1.1/24'

=========================================================



=== Форматрование строк с помощью f- строк ==============

F-строки — это литерал строки с буквой f перед ним. Внутри f-строки в паре фигурных скобок указываются имена переменных, которые надо подставить:

    ip = '10.1.1.1'
    mask = 24
    f"IP: {ip}, mask: {mask}"
    'IP: 10.1.1.1, mask: 24'
    
f-строки — это выражение, которое выполняется, а не просто строка, таким образом нельзя сначала написать шаблон, а затем определить переменные, которые используются в шаблоне

Кроме подстановки значений переменных, в фигурных скобках можно писать выражения:

    first_name = 'William'
    second_name = 'Shakespeare'
    f"{first_name.upper()} {second_name.upper()}"
    'WILLIAM SHAKESPEARE'

После двоеточия в f-строках можно указывать те же значения, что и при использовании format:

    oct1, oct2, oct3, oct4 = [10, 1, 1, 1]
    
    print(f'''
    IP address:
    {oct1:<8} {oct2:<8} {oct3:<8} {oct4:<8}
    {oct1:08b} {oct2:08b} {oct3:08b} {oct4:08b}''')
    
    IP address:
    10 1 1 1
    00001010 00000001 00000001 00000001

=========================================================



=== Список (List) =======================================

Список - это последовательность элементов, разделенных между собой запятой и заключенных в квадратные скобки, изменяемый упорядоченный тип данных

    list1 = [10,20,30,77]
    list2 = ['one', 'dog', 'seven']
    list3 = [1, 20, 4.0, 'word']
    
Создание списков:

    vlans = [10, 20, 30, 50]
    
    list1 = list('router')
    print(list1)
    ['r', 'o', 'u', 't', 'e', 'r']

Так как список - это упорядоченный тип данных, то, как и в строках, в списках можно обращаться к элементу по номеру, делать срезы:

    list3 = [1, 20, 4.0, 'word']
    
    list3[1]
    20
    
    list3[1::]
    [20, 4.0, 'word']

reverse() - метод переворачивания списка:

    vlans = ['10', '15', '20', '30', '100-200']
    vlans.reverse()
    vlans
    ['100-200', '30', '20', '15', '10']
    
Изменить элемент списка:

    list3 = [1, 20, 4.0, 'word']
    list3[0] = 'test'
    list3
    ['test', 20, 4.0, 'word']

Можно создавать и список списков и обращаться к элементам во вложенных списках:

    interfaces = [['FastEthernet0/0', '15.0.15.1', 'YES', 'manual', 'up', 'up'],
    ['FastEthernet0/1', '10.0.1.1', 'YES', 'manual', 'up', 'up'],
    ['FastEthernet0/2', '10.0.2.1', 'YES', 'manual', 'up', 'down']]
    
    interfaces[0][0]
    'FastEthernet0/0'
    
    interfaces[2][0]
    'FastEthernet0/2'
    
    interfaces[2][1]
    '10.0.2.1'

len() - функция, возвращает количество элементов списка

sorted() - сортирует элементы списка по возрастанию и возвращает новый список:

    names = ['John', 'Michael', 'Antony']
    sorted(names)
    ['Antony', 'John', 'Michael']

join() - метод, собирающий список в одну СТРОКУ с разделителем, который указан перед join:

    vlans = ['10', '20', '30']
    ','.join(vlans)
    '10,20,30'

append() - метод, добавляющий в конец списка указанный элемент, ничего не возвращает:

    vlans = ['10', '20', '30', '100-200']
    vlans.append('300')
    vlans
    ['10', '20', '30', '100-200', '300']
    
extend() - метод для объединения списков, изменяет спимок, к которому применен:

    vlans = ['10', '20', '30', '100-200']
    vlans2 = ['300', '400', '500']
    vlans.extend(vlans2)
    vlans
    ['10', '20', '30', '100-200', '300', '400', '500']
    
Суммирование списков:

    vlans = ['10', '20', '30', '100-200']
    vlans2 = ['300', '400', '500']
    vlans + vlans2
    ['10', '20', '30', '100-200', '300', '400', '500']
    
    result = vlans + vlans2
    result
    ['10', '20', '30', '100-200', '300', '400', '500']

pop() - метод, удаляющий элемент, соответствующий указанному номеру, возвращает этот элемент (без указания номера удаляется последний элемент списка.):

    vlans = ['10', '20', '30', '100-200']
    vlans.pop(-1)
    '100-200'
    vlans
    ['10', '20', '30']
    
remove() - метод, удаляющий указанный элемент, не возвращает удаленный элемент:

    In [31]: vlans = ['10', '20', '30', '100-200']
    In [32]: vlans.remove('20')
    In [33]: vlans
    Out[33]: ['10', '30', '100-200']
    
index() - метод для определения под каким номером в списке находится указанный элемент:

    In [35]: vlans = ['10', '20', '30', '100-200']
    In [36]: vlans.index('30')
    Out[36]: 2
    
insert() - метод, позволяющий вставить элемент на определенное место в списке:

    In [37]: vlans = ['10', '20', '30', '100-200']
    In [38]: vlans.insert(1, '15')
    In [39]: vlans
    Out[39]: ['10', '15', '20', '30', '100-200']
    
sort() - сортирует список на месте:

    In [40]: vlans = [1, 50, 10, 15]
    In [41]: vlans.sort()
    In [42]: vlans
    Out[42]: [1, 10, 15, 50]	

=========================================================



=== Словарь (Dictionary) ================================



=========================================================